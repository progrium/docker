// generated by rpcproxy-gen -- DO NOT EDIT
package plugin

import "github.com/docker/docker/plugins"

// VolumeDriver

type volumeDriverProxy struct {
	client *plugins.Client
}

type volumeDriver_Create_Args struct {
	Name string
}

type volumeDriver_Create_Return struct {
	Err error
}

func (p *volumeDriverProxy) Create(name string) (err error) {
	args := volumeDriver_Create_Args{
		name,
	}
	var ret volumeDriver_Create_Return
	if err := p.client.Call("VolumeDriver.Create", args, &ret); err != nil {
		return err
	}
	return ret.Err
}

type volumeDriver_Remove_Args struct {
	Name string
}

type volumeDriver_Remove_Return struct {
	Err error
}

func (p *volumeDriverProxy) Remove(name string) (err error) {
	args := volumeDriver_Remove_Args{
		name,
	}
	var ret volumeDriver_Remove_Return
	if err := p.client.Call("VolumeDriver.Remove", args, &ret); err != nil {
		return err
	}
	return ret.Err
}

type volumeDriver_Path_Args struct {
	Name string
}

type volumeDriver_Path_Return struct {
	Mountpoint string
	Err        error
}

func (p *volumeDriverProxy) Path(name string) (mountpoint string, err error) {
	args := volumeDriver_Path_Args{
		name,
	}
	var ret volumeDriver_Path_Return
	if err := p.client.Call("VolumeDriver.Path", args, &ret); err != nil {
		return "", err
	}
	return ret.Mountpoint, ret.Err
}

type volumeDriver_Mount_Args struct {
	Name string
}

type volumeDriver_Mount_Return struct {
	Mountpoint string
	Err        error
}

func (p *volumeDriverProxy) Mount(name string) (mountpoint string, err error) {
	args := volumeDriver_Mount_Args{
		name,
	}
	var ret volumeDriver_Mount_Return
	if err := p.client.Call("VolumeDriver.Mount", args, &ret); err != nil {
		return "", err
	}
	return ret.Mountpoint, ret.Err
}

type volumeDriver_Unmount_Args struct {
	Name string
}

type volumeDriver_Unmount_Return struct {
	Err error
}

func (p *volumeDriverProxy) Unmount(name string) (err error) {
	args := volumeDriver_Unmount_Args{
		name,
	}
	var ret volumeDriver_Unmount_Return
	if err := p.client.Call("VolumeDriver.Unmount", args, &ret); err != nil {
		return err
	}
	return ret.Err
}
